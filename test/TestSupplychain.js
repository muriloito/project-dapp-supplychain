// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require('SupplyChain');
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('1', "ether")
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        let supplyChain = await SupplyChain.deployed();

        // Mark an item as Harvested by calling function harvestItem()
        let tx = await supplyChain.harvestItem(upc, 
            originFarmerID, 
            originFarmName, 
            originFarmInformation, 
            originFarmLatitude, 
            originFarmLongitude, 
            productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItem(upc)

        // Verify the result set
        assert.equal(item[0], sku, 'Error: Invalid item SKU')
        assert.equal(item[1], upc, 'Error: Invalid item UPC')
        assert.equal(item[2], 0, 'Error: Invalid item State')
        assert.equal(item[3], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(item[4], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(item[5], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(item[6], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(item[7], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(item[8], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')     
        
        truffleAssert.eventEmitted(tx, 'Harvested', (ev) => {return ev.upc.toNumber() === upc;});
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()        

        // Mark an item as Processed by calling function processtItem()
        let tx = await supplyChain.processItem(upc);

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItem(upc)

        // Verify the result set
        assert.equal(item[1], upc, 'Error: Invalid item UPC')
        assert.equal(item[2], 1, 'Error: Invalid item State')

        truffleAssert.eventEmitted(tx, 'Processed', (ev) => {return ev.upc.toNumber() === upc;});
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()        

        // Mark an item as Processed by calling function processtItem()
        let tx = await supplyChain.packItem(upc);

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItem(upc)

        // Verify the result set
        assert.equal(item[1], upc, 'Error: Invalid item UPC')
        assert.equal(item[2], 2, 'Error: Invalid item State')

        truffleAssert.eventEmitted(tx, 'Packed', (ev) => {return ev.upc.toNumber() === upc;});
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()        

        // Mark an item as Processed by calling function processtItem()
        let tx = await supplyChain.sellItem(upc, productPrice);

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = await supplyChain.fetchItem(upc)

        // Verify the result set
        assert.equal(item[1], upc, 'Error: Invalid item UPC')
        assert.equal(item[2], 3, 'Error: Invalid item State')
        assert.equal(item[9], productPrice, 'Error: Invalid item State')

        truffleAssert.eventEmitted(tx, 'ForSale', (ev) => {return ev.upc.toNumber() === upc;});
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Shipped()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Received()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Purchased()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })

});

